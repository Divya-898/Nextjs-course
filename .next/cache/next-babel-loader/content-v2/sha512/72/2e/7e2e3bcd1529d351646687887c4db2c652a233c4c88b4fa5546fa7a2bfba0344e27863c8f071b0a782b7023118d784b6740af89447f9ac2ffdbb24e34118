{"ast":null,"code":"// import NextAuth from 'next-auth';\n// import Providers from 'next-auth/providers';\n// import { connectToDatabase } from '../../../lib/db';\n// import { verifyPassword } from '../../../lib/auth';\n// export default NextAuth({\n//   session: {\n//     jwt: true,\n//   },\n//   providers: [\n//     Providers.Credentials({\n//       async authorize(credentials) {\n//         const client = await connectToDatabase();\n//         const usersCollection = client.db().collection('users');\n//         const user = await usersCollection.findOne({\n//           email: credentials.email,\n//         });\n//         if (!user) {\n//           client.close();\n//           throw new Error('No user found!');\n//         }\n//         const isValid = await verifyPassword(\n//           credentials.password,\n//           user.password\n//         );\n//         if (!isValid) {\n//           client.close();\n//           throw new Error('Could not log you in!');\n//         }\n//         client.close();\n//         return { email: user.email };\n//       },\n//     }),\n//   ],\n// });","map":{"version":3,"sources":["/Users/mac/Documents/NextJs-Course/untitled folder/nextjs-course-code/pages/api/auth/[...nextauth].js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["// import NextAuth from 'next-auth';\n// import Providers from 'next-auth/providers';\n// import { connectToDatabase } from '../../../lib/db';\n// import { verifyPassword } from '../../../lib/auth';\n\n\n// export default NextAuth({\n//   session: {\n//     jwt: true,\n//   },\n//   providers: [\n//     Providers.Credentials({\n//       async authorize(credentials) {\n//         const client = await connectToDatabase();\n\n//         const usersCollection = client.db().collection('users');\n\n//         const user = await usersCollection.findOne({\n//           email: credentials.email,\n//         });\n\n//         if (!user) {\n//           client.close();\n//           throw new Error('No user found!');\n//         }\n\n//         const isValid = await verifyPassword(\n//           credentials.password,\n//           user.password\n//         );\n\n//         if (!isValid) {\n//           client.close();\n//           throw new Error('Could not log you in!');\n//         }\n\n//         client.close();\n//         return { email: user.email };\n        \n//       },\n//     }),\n//   ],\n// });\n"]},"metadata":{},"sourceType":"script"}